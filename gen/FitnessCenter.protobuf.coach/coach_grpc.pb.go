// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: coach.proto

package FitnessCenter_protobuf_coach

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coach_CreateCoach_FullMethodName                                = "/fitness_center.coach.Coach/CreateCoach"
	Coach_GetCoachById_FullMethodName                               = "/fitness_center.coach.Coach/GetCoachById"
	Coach_UpdateCoach_FullMethodName                                = "/fitness_center.coach.Coach/UpdateCoach"
	Coach_DeleteCoachById_FullMethodName                            = "/fitness_center.coach.Coach/DeleteCoachById"
	Coach_GetCoaches_FullMethodName                                 = "/fitness_center.coach.Coach/GetCoaches"
	Coach_GetCoachesWithServicesWithReviewsWithUsers_FullMethodName = "/fitness_center.coach.Coach/GetCoachesWithServicesWithReviewsWithUsers"
)

// CoachClient is the client API for Coach service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoachClient interface {
	CreateCoach(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateCoachRequest, CreateCoachResponse], error)
	GetCoachById(ctx context.Context, in *GetCoachByIdRequest, opts ...grpc.CallOption) (*GetCoachByIdResponse, error)
	UpdateCoach(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateCoachRequest, UpdateCoachResponse], error)
	DeleteCoachById(ctx context.Context, in *DeleteCoachByIdRequest, opts ...grpc.CallOption) (*DeleteCoachByIdResponse, error)
	GetCoaches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCoachesResponse, error)
	GetCoachesWithServicesWithReviewsWithUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCoachesWithServicesWithReviewsWithUsersResponse, error)
}

type coachClient struct {
	cc grpc.ClientConnInterface
}

func NewCoachClient(cc grpc.ClientConnInterface) CoachClient {
	return &coachClient{cc}
}

func (c *coachClient) CreateCoach(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateCoachRequest, CreateCoachResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Coach_ServiceDesc.Streams[0], Coach_CreateCoach_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateCoachRequest, CreateCoachResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Coach_CreateCoachClient = grpc.ClientStreamingClient[CreateCoachRequest, CreateCoachResponse]

func (c *coachClient) GetCoachById(ctx context.Context, in *GetCoachByIdRequest, opts ...grpc.CallOption) (*GetCoachByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoachByIdResponse)
	err := c.cc.Invoke(ctx, Coach_GetCoachById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coachClient) UpdateCoach(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateCoachRequest, UpdateCoachResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Coach_ServiceDesc.Streams[1], Coach_UpdateCoach_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateCoachRequest, UpdateCoachResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Coach_UpdateCoachClient = grpc.ClientStreamingClient[UpdateCoachRequest, UpdateCoachResponse]

func (c *coachClient) DeleteCoachById(ctx context.Context, in *DeleteCoachByIdRequest, opts ...grpc.CallOption) (*DeleteCoachByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCoachByIdResponse)
	err := c.cc.Invoke(ctx, Coach_DeleteCoachById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coachClient) GetCoaches(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCoachesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoachesResponse)
	err := c.cc.Invoke(ctx, Coach_GetCoaches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coachClient) GetCoachesWithServicesWithReviewsWithUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCoachesWithServicesWithReviewsWithUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoachesWithServicesWithReviewsWithUsersResponse)
	err := c.cc.Invoke(ctx, Coach_GetCoachesWithServicesWithReviewsWithUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoachServer is the server API for Coach service.
// All implementations must embed UnimplementedCoachServer
// for forward compatibility.
type CoachServer interface {
	CreateCoach(grpc.ClientStreamingServer[CreateCoachRequest, CreateCoachResponse]) error
	GetCoachById(context.Context, *GetCoachByIdRequest) (*GetCoachByIdResponse, error)
	UpdateCoach(grpc.ClientStreamingServer[UpdateCoachRequest, UpdateCoachResponse]) error
	DeleteCoachById(context.Context, *DeleteCoachByIdRequest) (*DeleteCoachByIdResponse, error)
	GetCoaches(context.Context, *emptypb.Empty) (*GetCoachesResponse, error)
	GetCoachesWithServicesWithReviewsWithUsers(context.Context, *emptypb.Empty) (*GetCoachesWithServicesWithReviewsWithUsersResponse, error)
	mustEmbedUnimplementedCoachServer()
}

// UnimplementedCoachServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoachServer struct{}

func (UnimplementedCoachServer) CreateCoach(grpc.ClientStreamingServer[CreateCoachRequest, CreateCoachResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateCoach not implemented")
}
func (UnimplementedCoachServer) GetCoachById(context.Context, *GetCoachByIdRequest) (*GetCoachByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoachById not implemented")
}
func (UnimplementedCoachServer) UpdateCoach(grpc.ClientStreamingServer[UpdateCoachRequest, UpdateCoachResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateCoach not implemented")
}
func (UnimplementedCoachServer) DeleteCoachById(context.Context, *DeleteCoachByIdRequest) (*DeleteCoachByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoachById not implemented")
}
func (UnimplementedCoachServer) GetCoaches(context.Context, *emptypb.Empty) (*GetCoachesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoaches not implemented")
}
func (UnimplementedCoachServer) GetCoachesWithServicesWithReviewsWithUsers(context.Context, *emptypb.Empty) (*GetCoachesWithServicesWithReviewsWithUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoachesWithServicesWithReviewsWithUsers not implemented")
}
func (UnimplementedCoachServer) mustEmbedUnimplementedCoachServer() {}
func (UnimplementedCoachServer) testEmbeddedByValue()               {}

// UnsafeCoachServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoachServer will
// result in compilation errors.
type UnsafeCoachServer interface {
	mustEmbedUnimplementedCoachServer()
}

func RegisterCoachServer(s grpc.ServiceRegistrar, srv CoachServer) {
	// If the following call pancis, it indicates UnimplementedCoachServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coach_ServiceDesc, srv)
}

func _Coach_CreateCoach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoachServer).CreateCoach(&grpc.GenericServerStream[CreateCoachRequest, CreateCoachResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Coach_CreateCoachServer = grpc.ClientStreamingServer[CreateCoachRequest, CreateCoachResponse]

func _Coach_GetCoachById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoachByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachServer).GetCoachById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coach_GetCoachById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachServer).GetCoachById(ctx, req.(*GetCoachByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coach_UpdateCoach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoachServer).UpdateCoach(&grpc.GenericServerStream[UpdateCoachRequest, UpdateCoachResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Coach_UpdateCoachServer = grpc.ClientStreamingServer[UpdateCoachRequest, UpdateCoachResponse]

func _Coach_DeleteCoachById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoachByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachServer).DeleteCoachById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coach_DeleteCoachById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachServer).DeleteCoachById(ctx, req.(*DeleteCoachByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coach_GetCoaches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachServer).GetCoaches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coach_GetCoaches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachServer).GetCoaches(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coach_GetCoachesWithServicesWithReviewsWithUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachServer).GetCoachesWithServicesWithReviewsWithUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coach_GetCoachesWithServicesWithReviewsWithUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachServer).GetCoachesWithServicesWithReviewsWithUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Coach_ServiceDesc is the grpc.ServiceDesc for Coach service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coach_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitness_center.coach.Coach",
	HandlerType: (*CoachServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoachById",
			Handler:    _Coach_GetCoachById_Handler,
		},
		{
			MethodName: "DeleteCoachById",
			Handler:    _Coach_DeleteCoachById_Handler,
		},
		{
			MethodName: "GetCoaches",
			Handler:    _Coach_GetCoaches_Handler,
		},
		{
			MethodName: "GetCoachesWithServicesWithReviewsWithUsers",
			Handler:    _Coach_GetCoachesWithServicesWithReviewsWithUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCoach",
			Handler:       _Coach_CreateCoach_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateCoach",
			Handler:       _Coach_UpdateCoach_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "coach.proto",
}
