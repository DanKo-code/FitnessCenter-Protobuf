// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: abonement.proto

package FitnessCenter_protobuf_abonement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Abonement_CreateAbonement_FullMethodName           = "/fitness_center.abonement.Abonement/CreateAbonement"
	Abonement_GetAbonementById_FullMethodName          = "/fitness_center.abonement.Abonement/GetAbonementById"
	Abonement_UpdateAbonement_FullMethodName           = "/fitness_center.abonement.Abonement/UpdateAbonement"
	Abonement_DeleteAbonementById_FullMethodName       = "/fitness_center.abonement.Abonement/DeleteAbonementById"
	Abonement_GetAbonements_FullMethodName             = "/fitness_center.abonement.Abonement/GetAbonements"
	Abonement_GetAbonementsWithServices_FullMethodName = "/fitness_center.abonement.Abonement/GetAbonementsWithServices"
	Abonement_GetAbonementsByIds_FullMethodName        = "/fitness_center.abonement.Abonement/GetAbonementsByIds"
)

// AbonementClient is the client API for Abonement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbonementClient interface {
	CreateAbonement(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateAbonementRequest, CreateAbonementResponse], error)
	GetAbonementById(ctx context.Context, in *GetAbonementByIdRequest, opts ...grpc.CallOption) (*GetAbonementByIdResponse, error)
	UpdateAbonement(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateAbonementRequest, UpdateAbonementResponse], error)
	DeleteAbonementById(ctx context.Context, in *DeleteAbonementByIdRequest, opts ...grpc.CallOption) (*DeleteAbonementByIdResponse, error)
	GetAbonements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAbonementsResponse, error)
	GetAbonementsWithServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAbonementsWithServicesResponse, error)
	GetAbonementsByIds(ctx context.Context, in *GetAbonementsByIdsRequest, opts ...grpc.CallOption) (*GetAbonementsByIdsResponse, error)
}

type abonementClient struct {
	cc grpc.ClientConnInterface
}

func NewAbonementClient(cc grpc.ClientConnInterface) AbonementClient {
	return &abonementClient{cc}
}

func (c *abonementClient) CreateAbonement(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateAbonementRequest, CreateAbonementResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Abonement_ServiceDesc.Streams[0], Abonement_CreateAbonement_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateAbonementRequest, CreateAbonementResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Abonement_CreateAbonementClient = grpc.ClientStreamingClient[CreateAbonementRequest, CreateAbonementResponse]

func (c *abonementClient) GetAbonementById(ctx context.Context, in *GetAbonementByIdRequest, opts ...grpc.CallOption) (*GetAbonementByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbonementByIdResponse)
	err := c.cc.Invoke(ctx, Abonement_GetAbonementById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abonementClient) UpdateAbonement(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateAbonementRequest, UpdateAbonementResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Abonement_ServiceDesc.Streams[1], Abonement_UpdateAbonement_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateAbonementRequest, UpdateAbonementResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Abonement_UpdateAbonementClient = grpc.ClientStreamingClient[UpdateAbonementRequest, UpdateAbonementResponse]

func (c *abonementClient) DeleteAbonementById(ctx context.Context, in *DeleteAbonementByIdRequest, opts ...grpc.CallOption) (*DeleteAbonementByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAbonementByIdResponse)
	err := c.cc.Invoke(ctx, Abonement_DeleteAbonementById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abonementClient) GetAbonements(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAbonementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbonementsResponse)
	err := c.cc.Invoke(ctx, Abonement_GetAbonements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abonementClient) GetAbonementsWithServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAbonementsWithServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbonementsWithServicesResponse)
	err := c.cc.Invoke(ctx, Abonement_GetAbonementsWithServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abonementClient) GetAbonementsByIds(ctx context.Context, in *GetAbonementsByIdsRequest, opts ...grpc.CallOption) (*GetAbonementsByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbonementsByIdsResponse)
	err := c.cc.Invoke(ctx, Abonement_GetAbonementsByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbonementServer is the server API for Abonement service.
// All implementations must embed UnimplementedAbonementServer
// for forward compatibility.
type AbonementServer interface {
	CreateAbonement(grpc.ClientStreamingServer[CreateAbonementRequest, CreateAbonementResponse]) error
	GetAbonementById(context.Context, *GetAbonementByIdRequest) (*GetAbonementByIdResponse, error)
	UpdateAbonement(grpc.ClientStreamingServer[UpdateAbonementRequest, UpdateAbonementResponse]) error
	DeleteAbonementById(context.Context, *DeleteAbonementByIdRequest) (*DeleteAbonementByIdResponse, error)
	GetAbonements(context.Context, *emptypb.Empty) (*GetAbonementsResponse, error)
	GetAbonementsWithServices(context.Context, *emptypb.Empty) (*GetAbonementsWithServicesResponse, error)
	GetAbonementsByIds(context.Context, *GetAbonementsByIdsRequest) (*GetAbonementsByIdsResponse, error)
	mustEmbedUnimplementedAbonementServer()
}

// UnimplementedAbonementServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAbonementServer struct{}

func (UnimplementedAbonementServer) CreateAbonement(grpc.ClientStreamingServer[CreateAbonementRequest, CreateAbonementResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateAbonement not implemented")
}
func (UnimplementedAbonementServer) GetAbonementById(context.Context, *GetAbonementByIdRequest) (*GetAbonementByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbonementById not implemented")
}
func (UnimplementedAbonementServer) UpdateAbonement(grpc.ClientStreamingServer[UpdateAbonementRequest, UpdateAbonementResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateAbonement not implemented")
}
func (UnimplementedAbonementServer) DeleteAbonementById(context.Context, *DeleteAbonementByIdRequest) (*DeleteAbonementByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAbonementById not implemented")
}
func (UnimplementedAbonementServer) GetAbonements(context.Context, *emptypb.Empty) (*GetAbonementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbonements not implemented")
}
func (UnimplementedAbonementServer) GetAbonementsWithServices(context.Context, *emptypb.Empty) (*GetAbonementsWithServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbonementsWithServices not implemented")
}
func (UnimplementedAbonementServer) GetAbonementsByIds(context.Context, *GetAbonementsByIdsRequest) (*GetAbonementsByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbonementsByIds not implemented")
}
func (UnimplementedAbonementServer) mustEmbedUnimplementedAbonementServer() {}
func (UnimplementedAbonementServer) testEmbeddedByValue()                   {}

// UnsafeAbonementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbonementServer will
// result in compilation errors.
type UnsafeAbonementServer interface {
	mustEmbedUnimplementedAbonementServer()
}

func RegisterAbonementServer(s grpc.ServiceRegistrar, srv AbonementServer) {
	// If the following call pancis, it indicates UnimplementedAbonementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Abonement_ServiceDesc, srv)
}

func _Abonement_CreateAbonement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AbonementServer).CreateAbonement(&grpc.GenericServerStream[CreateAbonementRequest, CreateAbonementResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Abonement_CreateAbonementServer = grpc.ClientStreamingServer[CreateAbonementRequest, CreateAbonementResponse]

func _Abonement_GetAbonementById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbonementByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbonementServer).GetAbonementById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Abonement_GetAbonementById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbonementServer).GetAbonementById(ctx, req.(*GetAbonementByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Abonement_UpdateAbonement_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AbonementServer).UpdateAbonement(&grpc.GenericServerStream[UpdateAbonementRequest, UpdateAbonementResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Abonement_UpdateAbonementServer = grpc.ClientStreamingServer[UpdateAbonementRequest, UpdateAbonementResponse]

func _Abonement_DeleteAbonementById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAbonementByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbonementServer).DeleteAbonementById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Abonement_DeleteAbonementById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbonementServer).DeleteAbonementById(ctx, req.(*DeleteAbonementByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Abonement_GetAbonements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbonementServer).GetAbonements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Abonement_GetAbonements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbonementServer).GetAbonements(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Abonement_GetAbonementsWithServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbonementServer).GetAbonementsWithServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Abonement_GetAbonementsWithServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbonementServer).GetAbonementsWithServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Abonement_GetAbonementsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbonementsByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbonementServer).GetAbonementsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Abonement_GetAbonementsByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbonementServer).GetAbonementsByIds(ctx, req.(*GetAbonementsByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Abonement_ServiceDesc is the grpc.ServiceDesc for Abonement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Abonement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fitness_center.abonement.Abonement",
	HandlerType: (*AbonementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAbonementById",
			Handler:    _Abonement_GetAbonementById_Handler,
		},
		{
			MethodName: "DeleteAbonementById",
			Handler:    _Abonement_DeleteAbonementById_Handler,
		},
		{
			MethodName: "GetAbonements",
			Handler:    _Abonement_GetAbonements_Handler,
		},
		{
			MethodName: "GetAbonementsWithServices",
			Handler:    _Abonement_GetAbonementsWithServices_Handler,
		},
		{
			MethodName: "GetAbonementsByIds",
			Handler:    _Abonement_GetAbonementsByIds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateAbonement",
			Handler:       _Abonement_CreateAbonement_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateAbonement",
			Handler:       _Abonement_UpdateAbonement_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "abonement.proto",
}
