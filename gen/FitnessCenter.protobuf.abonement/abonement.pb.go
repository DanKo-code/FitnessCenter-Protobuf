// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: abonement.proto

package FitnessCenter_protobuf_abonement

import (
	FitnessCenter_protobuf_service "github.com/DanKo-code/FitnessCenter-Protobuf/gen/FitnessCenter.protobuf.service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AbonementObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Validity      string `protobuf:"bytes,3,opt,name=validity,proto3" json:"validity,omitempty"`
	VisitingTime  string `protobuf:"bytes,4,opt,name=visiting_time,json=visitingTime,proto3" json:"visiting_time,omitempty"`
	Photo         string `protobuf:"bytes,5,opt,name=photo,proto3" json:"photo,omitempty"`
	Price         int32  `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	CreatedTime   string `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime   string `protobuf:"bytes,8,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	StripePriceId string `protobuf:"bytes,9,opt,name=stripe_price_id,json=stripePriceId,proto3" json:"stripe_price_id,omitempty"`
}

func (x *AbonementObject) Reset() {
	*x = AbonementObject{}
	mi := &file_abonement_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbonementObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonementObject) ProtoMessage() {}

func (x *AbonementObject) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonementObject.ProtoReflect.Descriptor instead.
func (*AbonementObject) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{0}
}

func (x *AbonementObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbonementObject) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AbonementObject) GetValidity() string {
	if x != nil {
		return x.Validity
	}
	return ""
}

func (x *AbonementObject) GetVisitingTime() string {
	if x != nil {
		return x.VisitingTime
	}
	return ""
}

func (x *AbonementObject) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *AbonementObject) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AbonementObject) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *AbonementObject) GetUpdatedTime() string {
	if x != nil {
		return x.UpdatedTime
	}
	return ""
}

func (x *AbonementObject) GetStripePriceId() string {
	if x != nil {
		return x.StripePriceId
	}
	return ""
}

type AbonementWithServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abonement *AbonementObject                                `protobuf:"bytes,1,opt,name=abonement,proto3" json:"abonement,omitempty"`
	Services  []*FitnessCenter_protobuf_service.ServiceObject `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *AbonementWithServices) Reset() {
	*x = AbonementWithServices{}
	mi := &file_abonement_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbonementWithServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonementWithServices) ProtoMessage() {}

func (x *AbonementWithServices) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonementWithServices.ProtoReflect.Descriptor instead.
func (*AbonementWithServices) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{1}
}

func (x *AbonementWithServices) GetAbonement() *AbonementObject {
	if x != nil {
		return x.Abonement
	}
	return nil
}

func (x *AbonementWithServices) GetServices() []*FitnessCenter_protobuf_service.ServiceObject {
	if x != nil {
		return x.Services
	}
	return nil
}

type AbonementDataForCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title        string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Validity     string   `protobuf:"bytes,2,opt,name=validity,proto3" json:"validity,omitempty"`
	VisitingTime string   `protobuf:"bytes,3,opt,name=visiting_time,json=visitingTime,proto3" json:"visiting_time,omitempty"`
	Price        int32    `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	ServicesIds  []string `protobuf:"bytes,5,rep,name=servicesIds,proto3" json:"servicesIds,omitempty"`
}

func (x *AbonementDataForCreate) Reset() {
	*x = AbonementDataForCreate{}
	mi := &file_abonement_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbonementDataForCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonementDataForCreate) ProtoMessage() {}

func (x *AbonementDataForCreate) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonementDataForCreate.ProtoReflect.Descriptor instead.
func (*AbonementDataForCreate) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{2}
}

func (x *AbonementDataForCreate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AbonementDataForCreate) GetValidity() string {
	if x != nil {
		return x.Validity
	}
	return ""
}

func (x *AbonementDataForCreate) GetVisitingTime() string {
	if x != nil {
		return x.VisitingTime
	}
	return ""
}

func (x *AbonementDataForCreate) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AbonementDataForCreate) GetServicesIds() []string {
	if x != nil {
		return x.ServicesIds
	}
	return nil
}

type AbonementDataForUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title        string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Validity     string   `protobuf:"bytes,3,opt,name=validity,proto3" json:"validity,omitempty"`
	VisitingTime string   `protobuf:"bytes,4,opt,name=visiting_time,json=visitingTime,proto3" json:"visiting_time,omitempty"`
	Price        int32    `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty"`
	ServicesIds  []string `protobuf:"bytes,6,rep,name=servicesIds,proto3" json:"servicesIds,omitempty"`
}

func (x *AbonementDataForUpdate) Reset() {
	*x = AbonementDataForUpdate{}
	mi := &file_abonement_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbonementDataForUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbonementDataForUpdate) ProtoMessage() {}

func (x *AbonementDataForUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbonementDataForUpdate.ProtoReflect.Descriptor instead.
func (*AbonementDataForUpdate) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{3}
}

func (x *AbonementDataForUpdate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AbonementDataForUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AbonementDataForUpdate) GetValidity() string {
	if x != nil {
		return x.Validity
	}
	return ""
}

func (x *AbonementDataForUpdate) GetVisitingTime() string {
	if x != nil {
		return x.VisitingTime
	}
	return ""
}

func (x *AbonementDataForUpdate) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AbonementDataForUpdate) GetServicesIds() []string {
	if x != nil {
		return x.ServicesIds
	}
	return nil
}

type CreateAbonementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*CreateAbonementRequest_AbonementDataForCreate
	//	*CreateAbonementRequest_AbonementPhoto
	Payload isCreateAbonementRequest_Payload `protobuf_oneof:"payload"`
}

func (x *CreateAbonementRequest) Reset() {
	*x = CreateAbonementRequest{}
	mi := &file_abonement_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAbonementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAbonementRequest) ProtoMessage() {}

func (x *CreateAbonementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAbonementRequest.ProtoReflect.Descriptor instead.
func (*CreateAbonementRequest) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{4}
}

func (m *CreateAbonementRequest) GetPayload() isCreateAbonementRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *CreateAbonementRequest) GetAbonementDataForCreate() *AbonementDataForCreate {
	if x, ok := x.GetPayload().(*CreateAbonementRequest_AbonementDataForCreate); ok {
		return x.AbonementDataForCreate
	}
	return nil
}

func (x *CreateAbonementRequest) GetAbonementPhoto() []byte {
	if x, ok := x.GetPayload().(*CreateAbonementRequest_AbonementPhoto); ok {
		return x.AbonementPhoto
	}
	return nil
}

type isCreateAbonementRequest_Payload interface {
	isCreateAbonementRequest_Payload()
}

type CreateAbonementRequest_AbonementDataForCreate struct {
	AbonementDataForCreate *AbonementDataForCreate `protobuf:"bytes,1,opt,name=abonementDataForCreate,proto3,oneof"`
}

type CreateAbonementRequest_AbonementPhoto struct {
	AbonementPhoto []byte `protobuf:"bytes,2,opt,name=abonementPhoto,proto3,oneof"`
}

func (*CreateAbonementRequest_AbonementDataForCreate) isCreateAbonementRequest_Payload() {}

func (*CreateAbonementRequest_AbonementPhoto) isCreateAbonementRequest_Payload() {}

type CreateAbonementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementWithServices *AbonementWithServices `protobuf:"bytes,1,opt,name=abonementWithServices,proto3" json:"abonementWithServices,omitempty"`
}

func (x *CreateAbonementResponse) Reset() {
	*x = CreateAbonementResponse{}
	mi := &file_abonement_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAbonementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAbonementResponse) ProtoMessage() {}

func (x *CreateAbonementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAbonementResponse.ProtoReflect.Descriptor instead.
func (*CreateAbonementResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAbonementResponse) GetAbonementWithServices() *AbonementWithServices {
	if x != nil {
		return x.AbonementWithServices
	}
	return nil
}

type GetAbonementByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAbonementByIdRequest) Reset() {
	*x = GetAbonementByIdRequest{}
	mi := &file_abonement_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbonementByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbonementByIdRequest) ProtoMessage() {}

func (x *GetAbonementByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbonementByIdRequest.ProtoReflect.Descriptor instead.
func (*GetAbonementByIdRequest) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{6}
}

func (x *GetAbonementByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAbonementByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementObject *AbonementObject `protobuf:"bytes,1,opt,name=abonementObject,proto3" json:"abonementObject,omitempty"`
}

func (x *GetAbonementByIdResponse) Reset() {
	*x = GetAbonementByIdResponse{}
	mi := &file_abonement_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbonementByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbonementByIdResponse) ProtoMessage() {}

func (x *GetAbonementByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbonementByIdResponse.ProtoReflect.Descriptor instead.
func (*GetAbonementByIdResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{7}
}

func (x *GetAbonementByIdResponse) GetAbonementObject() *AbonementObject {
	if x != nil {
		return x.AbonementObject
	}
	return nil
}

type UpdateAbonementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*UpdateAbonementRequest_AbonementDataForUpdate
	//	*UpdateAbonementRequest_AbonementPhoto
	Payload isUpdateAbonementRequest_Payload `protobuf_oneof:"payload"`
}

func (x *UpdateAbonementRequest) Reset() {
	*x = UpdateAbonementRequest{}
	mi := &file_abonement_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAbonementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAbonementRequest) ProtoMessage() {}

func (x *UpdateAbonementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAbonementRequest.ProtoReflect.Descriptor instead.
func (*UpdateAbonementRequest) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{8}
}

func (m *UpdateAbonementRequest) GetPayload() isUpdateAbonementRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *UpdateAbonementRequest) GetAbonementDataForUpdate() *AbonementDataForUpdate {
	if x, ok := x.GetPayload().(*UpdateAbonementRequest_AbonementDataForUpdate); ok {
		return x.AbonementDataForUpdate
	}
	return nil
}

func (x *UpdateAbonementRequest) GetAbonementPhoto() []byte {
	if x, ok := x.GetPayload().(*UpdateAbonementRequest_AbonementPhoto); ok {
		return x.AbonementPhoto
	}
	return nil
}

type isUpdateAbonementRequest_Payload interface {
	isUpdateAbonementRequest_Payload()
}

type UpdateAbonementRequest_AbonementDataForUpdate struct {
	AbonementDataForUpdate *AbonementDataForUpdate `protobuf:"bytes,1,opt,name=abonementDataForUpdate,proto3,oneof"`
}

type UpdateAbonementRequest_AbonementPhoto struct {
	AbonementPhoto []byte `protobuf:"bytes,2,opt,name=abonementPhoto,proto3,oneof"`
}

func (*UpdateAbonementRequest_AbonementDataForUpdate) isUpdateAbonementRequest_Payload() {}

func (*UpdateAbonementRequest_AbonementPhoto) isUpdateAbonementRequest_Payload() {}

type UpdateAbonementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementWithServices *AbonementWithServices `protobuf:"bytes,1,opt,name=abonementWithServices,proto3" json:"abonementWithServices,omitempty"`
}

func (x *UpdateAbonementResponse) Reset() {
	*x = UpdateAbonementResponse{}
	mi := &file_abonement_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAbonementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAbonementResponse) ProtoMessage() {}

func (x *UpdateAbonementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAbonementResponse.ProtoReflect.Descriptor instead.
func (*UpdateAbonementResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAbonementResponse) GetAbonementWithServices() *AbonementWithServices {
	if x != nil {
		return x.AbonementWithServices
	}
	return nil
}

type DeleteAbonementByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteAbonementByIdRequest) Reset() {
	*x = DeleteAbonementByIdRequest{}
	mi := &file_abonement_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAbonementByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAbonementByIdRequest) ProtoMessage() {}

func (x *DeleteAbonementByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAbonementByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteAbonementByIdRequest) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteAbonementByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteAbonementByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementObject *AbonementObject `protobuf:"bytes,1,opt,name=abonementObject,proto3" json:"abonementObject,omitempty"`
}

func (x *DeleteAbonementByIdResponse) Reset() {
	*x = DeleteAbonementByIdResponse{}
	mi := &file_abonement_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAbonementByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAbonementByIdResponse) ProtoMessage() {}

func (x *DeleteAbonementByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAbonementByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteAbonementByIdResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteAbonementByIdResponse) GetAbonementObject() *AbonementObject {
	if x != nil {
		return x.AbonementObject
	}
	return nil
}

type GetAbonementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementObjects []*AbonementObject `protobuf:"bytes,1,rep,name=AbonementObjects,proto3" json:"AbonementObjects,omitempty"`
}

func (x *GetAbonementsResponse) Reset() {
	*x = GetAbonementsResponse{}
	mi := &file_abonement_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbonementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbonementsResponse) ProtoMessage() {}

func (x *GetAbonementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbonementsResponse.ProtoReflect.Descriptor instead.
func (*GetAbonementsResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{12}
}

func (x *GetAbonementsResponse) GetAbonementObjects() []*AbonementObject {
	if x != nil {
		return x.AbonementObjects
	}
	return nil
}

type GetAbonementsWithServicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementsWithServices []*AbonementWithServices `protobuf:"bytes,1,rep,name=abonementsWithServices,proto3" json:"abonementsWithServices,omitempty"`
}

func (x *GetAbonementsWithServicesResponse) Reset() {
	*x = GetAbonementsWithServicesResponse{}
	mi := &file_abonement_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbonementsWithServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbonementsWithServicesResponse) ProtoMessage() {}

func (x *GetAbonementsWithServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbonementsWithServicesResponse.ProtoReflect.Descriptor instead.
func (*GetAbonementsWithServicesResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{13}
}

func (x *GetAbonementsWithServicesResponse) GetAbonementsWithServices() []*AbonementWithServices {
	if x != nil {
		return x.AbonementsWithServices
	}
	return nil
}

type GetAbonementsByIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GetAbonementsByIdsRequest) Reset() {
	*x = GetAbonementsByIdsRequest{}
	mi := &file_abonement_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbonementsByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbonementsByIdsRequest) ProtoMessage() {}

func (x *GetAbonementsByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbonementsByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetAbonementsByIdsRequest) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{14}
}

func (x *GetAbonementsByIdsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type GetAbonementsByIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbonementObjects []*AbonementObject `protobuf:"bytes,1,rep,name=abonementObjects,proto3" json:"abonementObjects,omitempty"`
}

func (x *GetAbonementsByIdsResponse) Reset() {
	*x = GetAbonementsByIdsResponse{}
	mi := &file_abonement_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAbonementsByIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAbonementsByIdsResponse) ProtoMessage() {}

func (x *GetAbonementsByIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abonement_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAbonementsByIdsResponse.ProtoReflect.Descriptor instead.
func (*GetAbonementsByIdsResponse) Descriptor() ([]byte, []int) {
	return file_abonement_proto_rawDescGZIP(), []int{15}
}

func (x *GetAbonementsByIdsResponse) GetAbonementObjects() []*AbonementObject {
	if x != nil {
		return x.AbonementObjects
	}
	return nil
}

var File_abonement_proto protoreflect.FileDescriptor

var file_abonement_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x41, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a,
	0x15, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x16, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x49, 0x64, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6a, 0x0a, 0x16, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x15, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61,
	0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x15,
	0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x6f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0f,
	0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0f, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x16,
	0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x66,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62,
	0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x16, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x80, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x15, 0x61, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x15, 0x61, 0x62, 0x6f, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x72,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x0f, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0f, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x41,
	0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x10, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x61, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x16, 0x61, 0x62, 0x6f, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x2d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x73, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55,
	0x0a, 0x10, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x10, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0xcc, 0x06, 0x0a, 0x09, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x79, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x31, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x66, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61,
	0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x34, 0x2e, 0x66, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x62,
	0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2f, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3b, 0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x33, 0x2e, 0x66, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x61, 0x62, 0x6f, 0x6e, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x66, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x61, 0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x62, 0x6f,
	0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x46, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x62, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_abonement_proto_rawDescOnce sync.Once
	file_abonement_proto_rawDescData = file_abonement_proto_rawDesc
)

func file_abonement_proto_rawDescGZIP() []byte {
	file_abonement_proto_rawDescOnce.Do(func() {
		file_abonement_proto_rawDescData = protoimpl.X.CompressGZIP(file_abonement_proto_rawDescData)
	})
	return file_abonement_proto_rawDescData
}

var file_abonement_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_abonement_proto_goTypes = []any{
	(*AbonementObject)(nil),                              // 0: fitness_center.abonement.AbonementObject
	(*AbonementWithServices)(nil),                        // 1: fitness_center.abonement.AbonementWithServices
	(*AbonementDataForCreate)(nil),                       // 2: fitness_center.abonement.AbonementDataForCreate
	(*AbonementDataForUpdate)(nil),                       // 3: fitness_center.abonement.AbonementDataForUpdate
	(*CreateAbonementRequest)(nil),                       // 4: fitness_center.abonement.CreateAbonementRequest
	(*CreateAbonementResponse)(nil),                      // 5: fitness_center.abonement.CreateAbonementResponse
	(*GetAbonementByIdRequest)(nil),                      // 6: fitness_center.abonement.GetAbonementByIdRequest
	(*GetAbonementByIdResponse)(nil),                     // 7: fitness_center.abonement.GetAbonementByIdResponse
	(*UpdateAbonementRequest)(nil),                       // 8: fitness_center.abonement.UpdateAbonementRequest
	(*UpdateAbonementResponse)(nil),                      // 9: fitness_center.abonement.UpdateAbonementResponse
	(*DeleteAbonementByIdRequest)(nil),                   // 10: fitness_center.abonement.DeleteAbonementByIdRequest
	(*DeleteAbonementByIdResponse)(nil),                  // 11: fitness_center.abonement.DeleteAbonementByIdResponse
	(*GetAbonementsResponse)(nil),                        // 12: fitness_center.abonement.GetAbonementsResponse
	(*GetAbonementsWithServicesResponse)(nil),            // 13: fitness_center.abonement.GetAbonementsWithServicesResponse
	(*GetAbonementsByIdsRequest)(nil),                    // 14: fitness_center.abonement.GetAbonementsByIdsRequest
	(*GetAbonementsByIdsResponse)(nil),                   // 15: fitness_center.abonement.GetAbonementsByIdsResponse
	(*FitnessCenter_protobuf_service.ServiceObject)(nil), // 16: fitness_center.service.ServiceObject
	(*emptypb.Empty)(nil),                                // 17: google.protobuf.Empty
}
var file_abonement_proto_depIdxs = []int32{
	0,  // 0: fitness_center.abonement.AbonementWithServices.abonement:type_name -> fitness_center.abonement.AbonementObject
	16, // 1: fitness_center.abonement.AbonementWithServices.services:type_name -> fitness_center.service.ServiceObject
	2,  // 2: fitness_center.abonement.CreateAbonementRequest.abonementDataForCreate:type_name -> fitness_center.abonement.AbonementDataForCreate
	1,  // 3: fitness_center.abonement.CreateAbonementResponse.abonementWithServices:type_name -> fitness_center.abonement.AbonementWithServices
	0,  // 4: fitness_center.abonement.GetAbonementByIdResponse.abonementObject:type_name -> fitness_center.abonement.AbonementObject
	3,  // 5: fitness_center.abonement.UpdateAbonementRequest.abonementDataForUpdate:type_name -> fitness_center.abonement.AbonementDataForUpdate
	1,  // 6: fitness_center.abonement.UpdateAbonementResponse.abonementWithServices:type_name -> fitness_center.abonement.AbonementWithServices
	0,  // 7: fitness_center.abonement.DeleteAbonementByIdResponse.abonementObject:type_name -> fitness_center.abonement.AbonementObject
	0,  // 8: fitness_center.abonement.GetAbonementsResponse.AbonementObjects:type_name -> fitness_center.abonement.AbonementObject
	1,  // 9: fitness_center.abonement.GetAbonementsWithServicesResponse.abonementsWithServices:type_name -> fitness_center.abonement.AbonementWithServices
	0,  // 10: fitness_center.abonement.GetAbonementsByIdsResponse.abonementObjects:type_name -> fitness_center.abonement.AbonementObject
	4,  // 11: fitness_center.abonement.Abonement.CreateAbonement:input_type -> fitness_center.abonement.CreateAbonementRequest
	6,  // 12: fitness_center.abonement.Abonement.GetAbonementById:input_type -> fitness_center.abonement.GetAbonementByIdRequest
	8,  // 13: fitness_center.abonement.Abonement.UpdateAbonement:input_type -> fitness_center.abonement.UpdateAbonementRequest
	10, // 14: fitness_center.abonement.Abonement.DeleteAbonementById:input_type -> fitness_center.abonement.DeleteAbonementByIdRequest
	17, // 15: fitness_center.abonement.Abonement.GetAbonements:input_type -> google.protobuf.Empty
	17, // 16: fitness_center.abonement.Abonement.GetAbonementsWithServices:input_type -> google.protobuf.Empty
	14, // 17: fitness_center.abonement.Abonement.GetAbonementsByIds:input_type -> fitness_center.abonement.GetAbonementsByIdsRequest
	5,  // 18: fitness_center.abonement.Abonement.CreateAbonement:output_type -> fitness_center.abonement.CreateAbonementResponse
	7,  // 19: fitness_center.abonement.Abonement.GetAbonementById:output_type -> fitness_center.abonement.GetAbonementByIdResponse
	9,  // 20: fitness_center.abonement.Abonement.UpdateAbonement:output_type -> fitness_center.abonement.UpdateAbonementResponse
	11, // 21: fitness_center.abonement.Abonement.DeleteAbonementById:output_type -> fitness_center.abonement.DeleteAbonementByIdResponse
	12, // 22: fitness_center.abonement.Abonement.GetAbonements:output_type -> fitness_center.abonement.GetAbonementsResponse
	13, // 23: fitness_center.abonement.Abonement.GetAbonementsWithServices:output_type -> fitness_center.abonement.GetAbonementsWithServicesResponse
	15, // 24: fitness_center.abonement.Abonement.GetAbonementsByIds:output_type -> fitness_center.abonement.GetAbonementsByIdsResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_abonement_proto_init() }
func file_abonement_proto_init() {
	if File_abonement_proto != nil {
		return
	}
	file_abonement_proto_msgTypes[4].OneofWrappers = []any{
		(*CreateAbonementRequest_AbonementDataForCreate)(nil),
		(*CreateAbonementRequest_AbonementPhoto)(nil),
	}
	file_abonement_proto_msgTypes[8].OneofWrappers = []any{
		(*UpdateAbonementRequest_AbonementDataForUpdate)(nil),
		(*UpdateAbonementRequest_AbonementPhoto)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_abonement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_abonement_proto_goTypes,
		DependencyIndexes: file_abonement_proto_depIdxs,
		MessageInfos:      file_abonement_proto_msgTypes,
	}.Build()
	File_abonement_proto = out.File
	file_abonement_proto_rawDesc = nil
	file_abonement_proto_goTypes = nil
	file_abonement_proto_depIdxs = nil
}
